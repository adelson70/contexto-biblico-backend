generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoAcessoLivros {
  TODOS
  ESPECIFICO
  LIVRE
}

model comentarios {
  id        Int      @id @default(autoincrement())
  livro String
  capitulo  Int
  versiculo Int
  texto     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  isDeleted Boolean  @default(false)

  @@index([isDeleted])
  @@index([livro, capitulo, versiculo])
  @@index([isDeleted, livro, capitulo])
}

model pesquisas {
  id               Int      @id @default(autoincrement())
  nome_livro       String
  livro_encontrado String?
  ip               String
  cidade           String?
  estado           String?
  createdAt        DateTime @default(now())
  capitulo_livro   String

  @@index([nome_livro])
  @@index([livro_encontrado])
  @@index([estado])
  @@index([cidade])
}

model referencias {
  id         Int      @id @default(autoincrement())
  livro  String
  capitulo   Int
  versiculo  Int
  referencia String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  isDeleted  Boolean  @default(false)

  @@index([isDeleted])
  @@index([livro, capitulo, versiculo])
  @@index([isDeleted, livro, capitulo])
}

model usuarios {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  nome             String?
  senha            String
  is_admin         Boolean  @default(false)
  refresh_token_hash String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  isDeleted        Boolean  @default(false)

  logins           usuario_logins[]
  livros_acesso    usuario_livros[]
  convites_criados convites[]

  @@index([email])
  @@index([isDeleted])
  @@index([is_admin])
  @@index([refresh_token_hash])
}

model usuario_logins {
  id               Int      @id @default(autoincrement())
  usuario_id       Int
  ip               String
  cidade           String?
  estado           String?
  createdAt        DateTime @default(now())

  usuario          usuarios @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([usuario_id])
  @@index([estado])
  @@index([cidade])
  @@index([createdAt])
}

model usuario_livros {
  id         Int      @id @default(autoincrement())
  usuario_id Int
  livro_id   Int
  createdAt  DateTime @default(now())

  usuario    usuarios @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  @@unique([usuario_id, livro_id])
  @@index([usuario_id])
  @@index([livro_id])
}

model convites {
  id                    Int               @id @default(autoincrement())
  nome                  String
  hash                  String?           @unique
  slug_personalizado    String?           @unique
  expira_em             DateTime?
  tipo_acesso_livros    TipoAcessoLivros  @default(LIVRE)
  criado_por            Int
  usos_realizados       Int               @default(0)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @default(now())
  isDeleted             Boolean           @default(false)

  criado_por_usuario    usuarios          @relation(fields: [criado_por], references: [id], onDelete: Cascade)
  livros                convite_livros[]

  @@index([hash])
  @@index([slug_personalizado])
  @@index([isDeleted])
  @@index([isDeleted, expira_em])
  @@index([criado_por, isDeleted])
  @@index([tipo_acesso_livros])
}

model convite_livros {
  id         Int      @id @default(autoincrement())
  convite_id Int
  livro_id   Int
  createdAt  DateTime @default(now())

  convite    convites @relation(fields: [convite_id], references: [id], onDelete: Cascade)

  @@unique([convite_id, livro_id])
  @@index([convite_id])
  @@index([livro_id])
}